{"ast":null,"code":"var _jsxFileName = \"/home/brenoangelo/Documents/rocketseat/nwl-together-reactjs/letmeask/src/pages/AdminRoom.tsx\",\n    _s = $RefreshSig$();\n\nimport { useAuth } from '../hooks/useAuth';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport logoImg from \"../assets/images/logo.svg\";\nimport { RoomCode } from '../components/RoomCode';\nimport '../styles/room.scss';\nimport { database } from '../services/firebase';\nimport { Question } from '../components/Question/index';\nimport { useRoom } from '../hooks/useRoom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AdminRoom() {\n  _s();\n\n  const {\n    user\n  } = useAuth();\n  const [newQuestion, setNewQuestion] = useState('');\n  const params = useParams();\n  const roomId = params.id;\n  const {\n    title,\n    questions\n  } = useRoom(roomId);\n\n  async function handleSendQuestion(event) {\n    event.preventDefault();\n\n    if (newQuestion.trim() === '') {\n      return;\n    }\n\n    if (!user) {\n      throw new Error('You must be logged in');\n    }\n\n    const question = {\n      content: newQuestion,\n      author: {\n        name: user.name,\n        avatar: user.avatar\n      },\n      isHighLighted: false,\n      isAnswered: false\n    };\n    await database.ref(`rooms/${roomId}/questions`).push(question);\n    setNewQuestion('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"Letmeask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RoomCode, {\n          code: roomId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Sala \", title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [questions.length, \" pergunta(s)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-list\",\n        children: questions.map(question => {\n          return /*#__PURE__*/_jsxDEV(Question, {\n            content: question.content,\n            author: question.author\n          }, question.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AdminRoom, \"RK+3moE3apZTA9vcdU/SJN/uLvo=\", false, function () {\n  return [useAuth, useParams, useRoom];\n});\n\n_c = AdminRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminRoom\");","map":{"version":3,"sources":["/home/brenoangelo/Documents/rocketseat/nwl-together-reactjs/letmeask/src/pages/AdminRoom.tsx"],"names":["useAuth","useState","useParams","RoomCode","database","Question","useRoom","AdminRoom","user","newQuestion","setNewQuestion","params","roomId","id","title","questions","handleSendQuestion","event","preventDefault","trim","Error","question","content","author","name","avatar","isHighLighted","isAnswered","ref","push","logoImg","length","map"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,kBAAxB;AAEA,SAASC,QAAT,QAAoC,OAApC;AAEA,SAASC,SAAT,QAA0B,kBAA1B;;AAIA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,OAAO,qBAAP;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,QAAT,QAAyB,8BAAzB;AACA,SAASC,OAAT,QAAwB,kBAAxB;;AAOA,OAAO,SAASC,SAAT,GAAqB;AAAA;;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAWR,OAAO,EAAxB;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAMU,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAMU,MAAM,GAAGD,MAAM,CAACE,EAAtB;AAGA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAuBT,OAAO,CAACM,MAAD,CAApC;;AAGA,iBAAeI,kBAAf,CAAkCC,KAAlC,EAAmD;AAC/CA,IAAAA,KAAK,CAACC,cAAN;;AAGA,QAAGT,WAAW,CAACU,IAAZ,OAAuB,EAA1B,EAA6B;AACzB;AACH;;AAED,QAAG,CAACX,IAAJ,EAAS;AACL,YAAM,IAAIY,KAAJ,CAAU,uBAAV,CAAN;AACH;;AAED,UAAMC,QAAQ,GAAG;AACbC,MAAAA,OAAO,EAAEb,WADI;AAEbc,MAAAA,MAAM,EAAE;AACJC,QAAAA,IAAI,EAAEhB,IAAI,CAACgB,IADP;AAEJC,QAAAA,MAAM,EAAEjB,IAAI,CAACiB;AAFT,OAFK;AAMbC,MAAAA,aAAa,EAAE,KANF;AAObC,MAAAA,UAAU,EAAE;AAPC,KAAjB;AAUA,UAAMvB,QAAQ,CAACwB,GAAT,CAAc,SAAQhB,MAAO,YAA7B,EAA0CiB,IAA1C,CAA+CR,QAA/C,CAAN;AACAX,IAAAA,cAAc,CAAC,EAAD,CAAd;AACH;;AAED,sBACI;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA,4BACI;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,gCACI;AAAK,UAAA,GAAG,EAAEoB,OAAV;AAAmB,UAAA,GAAG,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,QAAD;AAAU,UAAA,IAAI,EAAElB;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAQI;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACI;AAAA,8BAAUE,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEMC,SAAS,CAACgB,MAAV,GAAmB,CAAnB,iBAAwB;AAAA,qBAAQhB,SAAS,CAACgB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAF9B;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,kBACKhB,SAAS,CAACiB,GAAV,CAAcX,QAAQ,IAAI;AACvB,8BACI,QAAC,QAAD;AAEI,YAAA,OAAO,EAAEA,QAAQ,CAACC,OAFtB;AAGI,YAAA,MAAM,EAAED,QAAQ,CAACE;AAHrB,aACSF,QAAQ,CAACR,EADlB;AAAA;AAAA;AAAA;AAAA,kBADJ;AAOH,SARA;AADL;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA+BH;;GAnEeN,S;UACKP,O,EAEFE,S,EAIcI,O;;;KAPjBC,S","sourcesContent":["import { useAuth } from '../hooks/useAuth';\n\nimport { useState, FormEvent } from 'react';\n\nimport { useParams } from 'react-router-dom';\n\nimport logoImg from '../assets/images/logo.svg'\nimport { Button } from '../components/Button';\nimport { RoomCode } from '../components/RoomCode';\n\nimport '../styles/room.scss'\nimport { database } from '../services/firebase';\nimport { Question } from '../components/Question/index';\nimport { useRoom } from '../hooks/useRoom';\n\n\ntype RoomParams = {\n    id: string;\n}\n\nexport function AdminRoom() {\n    const { user } = useAuth()\n    const [newQuestion, setNewQuestion] = useState('')\n    const params = useParams<RoomParams>()\n    const roomId = params.id\n\n\n    const { title, questions } = useRoom(roomId)\n    \n\n    async function handleSendQuestion(event: FormEvent){\n        event.preventDefault()\n\n      \n        if(newQuestion.trim() === ''){\n            return;\n        }\n\n        if(!user){\n            throw new Error('You must be logged in')\n        }\n\n        const question = {\n            content: newQuestion,\n            author: {\n                name: user.name,\n                avatar: user.avatar\n            },\n            isHighLighted: false,\n            isAnswered: false\n        }\n\n        await database.ref(`rooms/${roomId}/questions`).push(question)\n        setNewQuestion('')\n    }\n\n    return (\n        <div id=\"page-room\">\n            <header>\n                <div className=\"content\">\n                    <img src={logoImg} alt=\"Letmeask\" />\n                    <RoomCode code={roomId}/>\n                </div>\n            </header>\n\n            <main>\n                <div className=\"room-title\">\n                    <h1>Sala {title}</h1>\n                    { questions.length > 0 && <span>{ questions.length } pergunta(s)</span> }\n                </div>\n\n                \n                <div className=\"question-list\">\n                    {questions.map(question => {\n                        return (\n                            <Question\n                                key={question.id} \n                                content={question.content} \n                                author={question.author}\n                            />\n                        )\n                    })}\n                </div>\n            </main>\n        </div>\n\n    );\n}"]},"metadata":{},"sourceType":"module"}