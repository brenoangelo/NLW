{"ast":null,"code":"var _jsxFileName = \"/home/brenoangelo/Documents/rocketseat/nwl-together-reactjs/letmeask/src/pages/Room.tsx\",\n    _s = $RefreshSig$();\n\nimport { useAuth } from '../hooks/useAuth';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport logoImg from \"../assets/images/logo.svg\";\nimport { Button } from '../components/Button';\nimport { RoomCode } from '../components/RoomCode';\nimport '../styles/room.scss';\nimport { database } from '../services/firebase';\nimport { useEffect } from 'react';\nimport { Question } from '../components/Question/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Room() {\n  _s();\n\n  const {\n    user\n  } = useAuth();\n  const [newQuestion, setNewQuestion] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [title, setTitle] = useState();\n  const params = useParams();\n  const roomId = params.id;\n  useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n    roomRef.on('value', room => {\n      var _databaseRoom$questio;\n\n      const databaseRoom = room.val();\n      const firebaseQuestions = (_databaseRoom$questio = databaseRoom.questions) !== null && _databaseRoom$questio !== void 0 ? _databaseRoom$questio : {};\n      const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isHighLighted: value.isHighLighted,\n          isAnswered: value.isAnswered\n        };\n      });\n      setTitle(databaseRoom.title);\n      setQuestions(parsedQuestions);\n    });\n  }, [roomId]);\n\n  async function handleSendQuestion(event) {\n    event.preventDefault();\n\n    if (newQuestion.trim() === '') {\n      return;\n    }\n\n    if (!user) {\n      throw new Error('You must be logged in');\n    }\n\n    const question = {\n      content: newQuestion,\n      author: {\n        name: user.name,\n        avatar: user.avatar\n      },\n      isHighLighted: false,\n      isAnswered: false\n    };\n    await database.ref(`rooms/${roomId}/questions`).push(question);\n    setNewQuestion('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"Letmeask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RoomCode, {\n          code: roomId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Sala \", title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [questions.length, \" pergunta(s)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendQuestion,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"O que voc\\xEA quer perguntar?\",\n          onChange: event => setNewQuestion(event.target.value),\n          value: newQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-footer\",\n          children: [user ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: user.avatar,\n              alt: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Para enviar uma pergunta, \", /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"fa\\xE7a seu login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 61\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            disabled: !user,\n            children: \"Enviar pergunta\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), questions.map(question => {\n        return /*#__PURE__*/_jsxDEV(Question, {\n          content: question.content,\n          author: question.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Room, \"buikXYWNrGiYkLehNGnnVHSOHLQ=\", false, function () {\n  return [useAuth, useParams];\n});\n\n_c = Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["/home/brenoangelo/Documents/rocketseat/nwl-together-reactjs/letmeask/src/pages/Room.tsx"],"names":["useAuth","useState","useParams","Button","RoomCode","database","useEffect","Question","Room","user","newQuestion","setNewQuestion","questions","setQuestions","title","setTitle","params","roomId","id","roomRef","ref","on","room","databaseRoom","val","firebaseQuestions","parsedQuestions","Object","entries","map","key","value","content","author","isHighLighted","isAnswered","handleSendQuestion","event","preventDefault","trim","Error","question","name","avatar","push","logoImg","length","target"],"mappings":"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","sourcesContent":["import { useAuth } from '../hooks/useAuth';\r\n\r\nimport { useState, FormEvent } from 'react';\r\n\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport logoImg from '../assets/images/logo.svg'\r\nimport { Button } from '../components/Button';\r\nimport { RoomCode } from '../components/RoomCode';\r\n\r\nimport '../styles/room.scss'\r\nimport { database } from '../services/firebase';\r\nimport { useEffect } from 'react';\r\nimport { Question } from '../components/Question/index';\r\n\r\n\r\ntype RoomParams = {\r\n    id: string;\r\n}\r\n\r\ntype FirebaseQuestions = Record<string, {\r\n    author: {\r\n        name: string;\r\n       avatar: string;\r\n    },\r\n    content: string;\r\n    isAnswered: boolean;\r\n    isHighLighted: boolean; \r\n}>\r\n\r\ntype Question = {\r\n    id: string;\r\n    author: {\r\n        name: string;\r\n       avatar: string;\r\n    },\r\n    content: string;\r\n    isAnswered: boolean;\r\n    isHighLighted: boolean; \r\n}\r\n\r\nexport function Room() {\r\n    const { user } = useAuth()\r\n    const [newQuestion, setNewQuestion] = useState('')\r\n    const [questions, setQuestions] = useState<Question[]>([])\r\n    const [title, setTitle] = useState()\r\n    const params = useParams<RoomParams>()\r\n    const roomId = params.id\r\n\r\n    useEffect(()=>{\r\n       const roomRef = database.ref(`rooms/${roomId}`) \r\n\r\n       roomRef.on('value', room => {\r\n            const databaseRoom = room.val();\r\n            const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {}; \r\n\r\n            const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\r\n                return {\r\n                    id: key,\r\n                    content: value.content,\r\n                    author: value.author,\r\n                    isHighLighted: value.isHighLighted,\r\n                    isAnswered: value.isAnswered,\r\n                }\r\n            })\r\n            \r\n            setTitle(databaseRoom.title)\r\n            setQuestions(parsedQuestions)\r\n           \r\n       })\r\n    },[roomId])\r\n\r\n\r\n    async function handleSendQuestion(event: FormEvent){\r\n        event.preventDefault()\r\n\r\n      \r\n        if(newQuestion.trim() === ''){\r\n            return;\r\n        }\r\n\r\n        if(!user){\r\n            throw new Error('You must be logged in')\r\n        }\r\n\r\n        const question = {\r\n            content: newQuestion,\r\n            author: {\r\n                name: user.name,\r\n                avatar: user.avatar\r\n            },\r\n            isHighLighted: false,\r\n            isAnswered: false\r\n        }\r\n\r\n        await database.ref(`rooms/${roomId}/questions`).push(question)\r\n        setNewQuestion('')\r\n    }\r\n\r\n    return (\r\n        <div id=\"page-room\">\r\n            <header>\r\n                <div className=\"content\">\r\n                    <img src={logoImg} alt=\"Letmeask\" />\r\n                    <RoomCode code={roomId}/>\r\n                </div>\r\n            </header>\r\n\r\n            <main>\r\n                <div className=\"room-title\">\r\n                    <h1>Sala {title}</h1>\r\n                    { questions.length > 0 && <span>{ questions.length } pergunta(s)</span> }\r\n                </div>\r\n\r\n                <form onSubmit={handleSendQuestion}>\r\n                    <textarea \r\n                        placeholder=\"O que você quer perguntar?\"\r\n                        onChange={event => setNewQuestion(event.target.value)}\r\n                        value={newQuestion}\r\n                    />\r\n\r\n                    <div className=\"form-footer\">\r\n                        { user ? (\r\n                            <div className=\"user-info\">\r\n                                <img src={user.avatar} alt={user.name} />\r\n                                <span>{user.name}</span>\r\n                            </div>\r\n                        ) : (\r\n                            <span>Para enviar uma pergunta, <button>faça seu login</button>.</span>\r\n                        )}\r\n                        <Button type=\"submit\" disabled={!user}>Enviar pergunta</Button>\r\n                    </div>\r\n                </form>\r\n                \r\n                {questions.map(question => {\r\n                    return (\r\n                        <Question \r\n                            content={question.content} \r\n                            author={question.author}\r\n                        />\r\n                    )\r\n                })}\r\n\r\n                <div className=\"question-list\">\r\n                    \r\n                </div>\r\n            </main>\r\n        </div>\r\n\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}