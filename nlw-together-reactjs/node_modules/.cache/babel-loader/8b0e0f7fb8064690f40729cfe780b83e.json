{"ast":null,"code":"import _slicedToArray from\"/home/brenoangelo/Documents/rocketseat/nwl-together-reactjs/letmeask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import{database}from\"../services/firebase\";import{useAuth}from\"./useAuth\";export function useRoom(roomId){var _useAuth=useAuth(),user=_useAuth.user;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),questions=_useState2[0],setQuestions=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),title=_useState4[0],setTitle=_useState4[1];useEffect(function(){var roomRef=database.ref(\"rooms/\".concat(roomId));roomRef.on('value',function(room){var _databaseRoom$questio;var databaseRoom=room.val();var firebaseQuestions=(_databaseRoom$questio=databaseRoom.questions)!==null&&_databaseRoom$questio!==void 0?_databaseRoom$questio:{};var parsedQuestions=Object.entries(firebaseQuestions).map(function(_ref){var _value$likes,_Object$entries$find,_value$likes2;var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];return{id:key,content:value.content,author:value.author,isHighLighted:value.isHighLighted,isAnswered:value.isAnswered,likeCount:Object.values((_value$likes=value.likes)!==null&&_value$likes!==void 0?_value$likes:{}).length,likeId:(_Object$entries$find=Object.entries((_value$likes2=value.likes)!==null&&_value$likes2!==void 0?_value$likes2:{}).find(function(_ref3){var _ref4=_slicedToArray(_ref3,2),key=_ref4[0],like=_ref4[1];return like.authorId===(user===null||user===void 0?void 0:user.id);}))===null||_Object$entries$find===void 0?void 0:_Object$entries$find[0]};});setTitle(databaseRoom.title);setQuestions(parsedQuestions);});return function(){roomRef.off('value');};},[roomId,user===null||user===void 0?void 0:user.id]);return{questions:questions,title:title};}","map":{"version":3,"sources":["/home/brenoangelo/Documents/rocketseat/nwl-together-reactjs/letmeask/src/hooks/useRoom.ts"],"names":["useEffect","useState","database","useAuth","useRoom","roomId","user","questions","setQuestions","title","setTitle","roomRef","ref","on","room","databaseRoom","val","firebaseQuestions","parsedQuestions","Object","entries","map","key","value","id","content","author","isHighLighted","isAnswered","likeCount","values","likes","length","likeId","find","like","authorId","off"],"mappings":"2LAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,QAAT,KAAyB,sBAAzB,CACA,OAASC,OAAT,KAAwB,WAAxB,CA4BA,MAAO,SAASC,CAAAA,OAAT,CAAiBC,MAAjB,CAAgC,cAClBF,OAAO,EADW,CAC3BG,IAD2B,UAC3BA,IAD2B,eAEDL,QAAQ,CAAiB,EAAjB,CAFP,wCAE5BM,SAF4B,eAEjBC,YAFiB,8BAGTP,QAAQ,EAHC,yCAG5BQ,KAH4B,eAGrBC,QAHqB,eAKnCV,SAAS,CAAC,UAAI,CACV,GAAMW,CAAAA,OAAO,CAAGT,QAAQ,CAACU,GAAT,iBAAsBP,MAAtB,EAAhB,CAEAM,OAAO,CAACE,EAAR,CAAW,OAAX,CAAoB,SAAAC,IAAI,CAAI,2BACvB,GAAMC,CAAAA,YAAY,CAAGD,IAAI,CAACE,GAAL,EAArB,CACA,GAAMC,CAAAA,iBAAoC,wBAAGF,YAAY,CAACR,SAAhB,+DAA6B,EAAvE,CAEA,GAAMW,CAAAA,eAAe,CAAGC,MAAM,CAACC,OAAP,CAAeH,iBAAf,EAAkCI,GAAlC,CAAsC,cAAkB,sFAAhBC,GAAgB,UAAXC,KAAW,UAC5E,MAAO,CACHC,EAAE,CAAEF,GADD,CAEHG,OAAO,CAAEF,KAAK,CAACE,OAFZ,CAGHC,MAAM,CAAEH,KAAK,CAACG,MAHX,CAIHC,aAAa,CAAEJ,KAAK,CAACI,aAJlB,CAKHC,UAAU,CAAEL,KAAK,CAACK,UALf,CAMHC,SAAS,CAAEV,MAAM,CAACW,MAAP,eAAcP,KAAK,CAACQ,KAApB,6CAA6B,EAA7B,EAAiCC,MANzC,CAOHC,MAAM,uBAAEd,MAAM,CAACC,OAAP,gBAAeG,KAAK,CAACQ,KAArB,+CAA8B,EAA9B,EAAkCG,IAAlC,CAAuC,kDAAEZ,GAAF,UAAMa,IAAN,gBAAgBA,CAAAA,IAAI,CAACC,QAAL,IAAkB9B,IAAlB,SAAkBA,IAAlB,iBAAkBA,IAAI,CAAEkB,EAAxB,CAAhB,EAAvC,CAAF,+CAAE,qBAAqF,CAArF,CAPL,CAAP,CASH,CAVuB,CAAxB,CAYAd,QAAQ,CAACK,YAAY,CAACN,KAAd,CAAR,CACAD,YAAY,CAACU,eAAD,CAAZ,CAEJ,CAnBD,EAqBA,MAAO,WAAM,CACTP,OAAO,CAAC0B,GAAR,CAAY,OAAZ,EACH,CAFD,CAGF,CA3BO,CA2BN,CAAChC,MAAD,CAASC,IAAT,SAASA,IAAT,iBAASA,IAAI,CAAEkB,EAAf,CA3BM,CAAT,CA6BC,MAAO,CAAEjB,SAAS,CAATA,SAAF,CAAaE,KAAK,CAALA,KAAb,CAAP,CACJ","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { database } from \"../services/firebase\"\nimport { useAuth } from \"./useAuth\"\n\ntype FirebaseQuestions = Record<string, {\n    author: {\n        name: string;\n       avatar: string;\n    },\n    content: string;\n    isAnswered: boolean;\n    isHighLighted: boolean; \n    likes: Record<string, {\n        authorId: string;\n    }>;\n}>\n\ntype QuestionType = {\n    id: string;\n    author: {\n        name: string;\n       avatar: string;\n    },\n    content: string;\n    isAnswered: boolean;\n    isHighLighted: boolean;\n    likeCount: number;\n    likeId: string | undefined; \n}\n\nexport function useRoom(roomId: string){\n    const { user } = useAuth()\n    const [questions, setQuestions] = useState<QuestionType[]>([])\n    const [title, setTitle] = useState()\n\n    useEffect(()=>{\n        const roomRef = database.ref(`rooms/${roomId}`) \n \n        roomRef.on('value', room => {\n             const databaseRoom = room.val();\n             const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {}; \n \n             const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\n                 return {\n                     id: key,\n                     content: value.content,\n                     author: value.author,\n                     isHighLighted: value.isHighLighted,\n                     isAnswered: value.isAnswered,\n                     likeCount: Object.values(value.likes ?? {}).length,\n                     likeId: Object.entries(value.likes ?? {}).find(([key,like]) => like.authorId === user?.id)?.[0],\n                 }\n             })\n             \n             setTitle(databaseRoom.title)\n             setQuestions(parsedQuestions)\n            \n        })\n\n        return () => {\n            roomRef.off('value');\n        }\n     },[roomId, user?.id])\n\n     return { questions, title }\n}"]},"metadata":{},"sourceType":"module"}